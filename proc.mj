(* Constants *)

const WORD = 42

(* Utilities *)

add1(a, b, c) = (s, r) where
    x = a ^ b;
    s = x ^ c;
    r = (a & b) + (x & c);
end where

add<n>(a:[n], b:[n], sub, c_in) = (o:[n], c_out) where
    if n = 1 then
        (o, c_out) = add1(a, b ^ sub, c_in);
    else
        (s_n1, c_n1) = add<n-1>(a[1..], b[1..], sub, c_in);
        (s_n, c_out) = add1(a[0], b[0] ^ sub, c_n1);
        o = s_n . s_n1
    end if
end where

carry1(a, c) = (s, r) where
    s = a ^ c;
    r = a & c;
end where

carry<n, i>(a:[n], c_in) = o:[i + 1] where
    if i = 0 then
        (o, c) = carry1(a[i], c_in);
    else
        (s, c) = carry1(a[i], c_in);
        o_n1 = carry<n, i - 1>(a, c);
        o = o_n1 . s;
    end if
end where

increment<n>(a:[n]) = o:[n] where
    o = carry<n, n - 1>(a, 1);
end where

signal<n, i>(ins:[n]) = s where
    s = ins[(n - 1) - i];
end where

(* Main *)

main() = () where
    (* Constant nodes *)
    zero = 000000000000000000000000000000000000000000;

    (* Registers *)
    pc_reg = reg(pc);
    a_reg = reg(a);

    (* Flags *)
    flag_zero = mux<WORD, 1>(a_reg, false, true);
    flag_sign = a_reg[0];

    (* Fetch *)
    ins = ram<WORD, WORD>(pc_reg, false, zero, zero);
    pc1 = increment<WORD>(pc_reg);
    op = ram<WORD, WORD>(pc1, false, zero, zero);
    pc2 = increment<WORD>(pc1);

    (* Decode *)
    signal_a_in    = signal<WORD, 0>(ins);
    signal_a_out   = signal<WORD, 1>(ins);
    signal_ram_in  = signal<WORD, 2>(ins);
    signal_ram_out = signal<WORD, 3>(ins);
    signal_add_out = signal<WORD, 4>(ins);
    signal_sub     = signal<WORD, 5>(ins);
    signal_jump    = signal<WORD, 6>(ins);
    signal_zero    = signal<WORD, 7>(ins);
    signal_less    = signal<WORD, 8>(ins);

    (* RAM access *)
    ram_out = ram<WORD, WORD>(op, signal_ram_in, op, a_reg);

    (* Arithmetic *)
    (add_out, c) = add<WORD>(a_reg, op, signal_sub, signal_sub);

    (* Bus *)
    bus = mux<1, WORD>(signal_ram_out, ram_out,
          mux<1, WORD>(signal_add_out, add_out,
          mux<1, WORD>(signal_a_out, a,
          zero)));

    (* Update registers *)
    a = mux<1, WORD>(signal_a_in, bus, a_reg);

    (* Jump *)
    jump = signal_jump & (not(signal_less) + flag_sign)
                       & (not(signal_zero) + flag_zero);
    pc = mux<1, WORD>(jump, op, pc2);
end where
